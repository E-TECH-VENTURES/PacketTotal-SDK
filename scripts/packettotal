#! /usr/bin/env python

import sys
import time
import getpass
import argparse

import requests
from packettotal_sdk import packettotal_api


def get_api() -> packettotal_api.PacketTotalApi:
    """
    Gets an authenticated API instance either by prompting the user or retrieving credential from disk
    :return: Returns a validated packettotal_api.PacketTotalApi instance
    """
    try:
        with open('.pt_api_key', 'r') as f:
            api = packettotal_api.PacketTotalApi(f.read())
            if not validate_api_key(api):
                api = prompt_api_token()
    except FileNotFoundError:
        api = prompt_api_token()
    return api


def prompt_api_token() -> packettotal_api.PacketTotalApi:
    """
    Prompts the user to enter their API key, tests the validity of the key, and if valid caches it to disk

    :return: Returns a validated packettotal_api.PacketTotalApi instance
    """
    valid = False
    api = None
    while not valid:
        api_key = getpass.getpass('Enter your API key: ', stream=None)
        api = packettotal_api.PacketTotalApi(api_key)
        if validate_api_key(api):
            with open('.pt_api_key', 'w') as f:
                f.write(api_key)
            valid = True
    return api


def validate_api_key(api: packettotal_api.PacketTotalApi) -> bool:
    """
    Determines whether an API key is valid

    :param api: An unvalidated packettotal_api.PacketTotalApi instance
    :return: True if api key is valid
    """
    valid = False
    usage = api.usage()
    if usage.status_code == 200:
        valid = True
    else:
        print('An error occurred while authenticating... [{}][{}]'.format(usage.status_code, usage.text))
    return valid


def _output_text_response(response: requests.Response, output_file=None) -> None:
    """
    Write a text response to console or file

    :param response: A request.Response object containing a populated .text variable
    :param output_file: The path to an optional output file
    """
    if response.status_code not in [200, 202]:
        print('An error occurred [{}]'.format(response.status_code), file=sys.stderr)
        print(response.text, file=sys.stderr)
    elif response.status_code == 303:
        print('Redirect - {}'.format(response.headers.get('location')))
    elif not output_file:
        print(response.text)
    else:
        print('Results written to: {}'.format(output_file))
        with open(output_file, 'w') as f:
            f.write(response.text)


def _output_binary_response(response: requests.Response, pcap_id: str):
    """
    Write a binary response to a zip file, or display an error

    :param response: A request.Response instance containing a populated .content variable
    :param pcap_id: An md5 hash corresponding to the PCAP file submission on PacketTotal.com
    """
    if response.status_code not in [200, 301]:
        print('An error occurred [{}]'.format(response.status_code), file=sys.stderr)
        print(response.text, file=sys.stderr)
    elif response.status_code == 202:
        print('Download job still processing, try again in a few seconds.')
    else:
        print('Results written to: {}'.format(pcap_id + '.zip'))
        with open(pcap_id + '.zip', 'wb') as f:
            f.write(response.content)


def _parse_cmdline():
    """
    positional arguments:
    mode                  The mode to invoke [ analyze|search|deep_search_create
                        |deep_search_get|info|analysis|download|similar ]

    optional arguments:
      -h, --help            show this help message and exit
      --query QUERY         A search query
      --pcap-id PCAP_ID     The MD5 hash of some PCAP file.
      --search-id SEARCH_ID
                            The search identifier corresponding to a deep search
                            task
      --path PCAP_PATH      The path to the pcap file you wish to analyze.
      --name PCAP_NAME      The optional name associated with the pcap analysis.
      --sources PCAP_SOURCES [PCAP_SOURCES ...]
                            URLs referencing the original analysis.
      --output OUTPUT       A path to an output file, defaulted to standard out if
                            not included.
    """
    parser = argparse.ArgumentParser(
        description='A simple commandline utility for interacting with the PacketTotal API.'
    )
    parser.add_argument('mode', metavar='mode', type=str,
                        help='The mode to invoke '
                             '[ analyze|search|deep_search_create|deep_search_get|info|analysis|'
                             'download|similar ]')
    parser.add_argument(
        '--query', dest='query', help='A search query',
        required='search' in sys.argv or 'deep_search_create' in sys.argv)
    parser.add_argument(
        '--pcap-id', dest='pcap_id', help='The MD5 hash of some PCAP file.',
        required='analysis' in sys.argv or 'download' in sys.argv or 'info' in sys.argv or 'similar' in sys.argv)
    parser.add_argument(
        '--search-id', dest='search_id', help='The search identifier corresponding to a deep search task',
        required='deep_search_get' in sys.argv)
    parser.add_argument(
        '--path', dest='pcap_path', help='The path to the pcap file you wish to analyze.',
        required='analyze' in sys.argv)
    parser.add_argument('--name', dest='pcap_name', help='The optional name associated with the pcap analysis.',
                        default=None)
    parser.add_argument('--sources', dest='pcap_sources', help='URLs referencing the original analysis.',
                        default=None, nargs='+')
    parser.add_argument(
        '--output', dest='output', help='A path to an output file, defaulted to standard out if not included.')
    args = parser.parse_args()
    return args


def main():
    args = _parse_cmdline()
    if '-h' in sys.argv or '--help' in sys.argv:
        return
    api = get_api()
    if args.mode == 'analyze':
        if args.pcap_sources:
            pcap_sources = args.pcap_sources
        else:
            pcap_sources = None
        _output_text_response(api.analyze(open(args.pcap_path, 'rb'), pcap_name=args.pcap_name, pcap_sources=pcap_sources))
    elif args.mode == 'search':
        _output_text_response(api.search(args.query), args.output)
    elif args.mode == 'deep_search_create':
        _output_text_response(api.deep_search_create(args.query), args.output)
    elif args.mode == 'deep_search_get':
        _output_text_response(api.deep_search_get(args.search_id), args.output)
    elif args.mode == 'info':
        _output_text_response(api.pcap_info(args.pcap_id), args.output)
    elif args.mode == 'analysis':
        _output_text_response(api.pcap_analysis(args.pcap_id), args.output)
    elif args.mode == 'download':
        response = api.pcap_download(args.pcap_id)
        retries = 5
        while response.status_code != 200 and retries > 0:
            print('{} analysis package is generating. Please wait.'.format(args.pcap_id))
            time.sleep(5)
            response = api.pcap_download(args.pcap_id)
            retries -= 1
        if retries == 0:
            print('An error occurred while attempting to download {}'.format(args.pcap_id), file=sys.stderr)
        else:
            _output_binary_response(response, args.pcap_id)
    elif args.mode == 'similar':
        _output_text_response(api.pcap_similar(args.pcap_id), args.output)
    elif args.mode == 'usage':
        _output_text_response(api.usage(), args.output)
    else:
        print('Invalid mode. Valid modes are: [{}]'.format('analyze|search|deep_search_create|deep_search_get|'
                                                           'info|analysis|download|similar'),
              file=sys.stderr)


if __name__ == '__main__':
    main()